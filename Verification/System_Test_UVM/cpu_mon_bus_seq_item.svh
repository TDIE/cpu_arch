//This file defines the cpu bus sequence item that is generated by the monitor.
//Part of Rudimentary Processor Design Project: https://github.com/TDIE/cpu_arch

import uvm_pkg::*;
`include "uvm_macros.svh"

class cpu_mon_bus_seq_item extends uvm_sequence_item;
    //Register with the UVM Factory
    `uvm_object_utils(cpu_mon_bus_seq_item)
    
    logic[15:0] instruction;
    logic[15:0] instr_addr;
    logic[3:0]  op_select;
    logic[15:0] bus_D;
    logic[15:0] address_out;
    logic[15:0] data_out;
    logic       zero;
    logic[15:0] data_in;
    logic       reset;

    //Constructor
    function new(string name="cpu_mon_bus_seq_item");
		super.new(name);
	endfunction

     //Convenience Methods
    function void do_copy(uvm_object rhs);
        cpu_mon_bus_seq_item rhs_;

        if(!$cast(rhs_, rhs)) begin
            uvm_report_error("do_copy:", "Cast Failed");
            return;
        end
        super.do_copy(rhs);
        data_in = rhs_.data_in;
        reset = rhs_.reset;
        instruction = rhs_.instruction;
        instr_addr = rhs_.instr_addr;
        op_select = rhs_.op_select;
        bus_D = rhs_.bus_D;
        address_out = rhs_.address_out;
        data_out = rhs_.data_out;
        zero = rhs_.zero;
    endfunction: do_copy

    function bit do_compare(uvm_object rhs, uvm_comparer comparer);
        cpu_mon_bus_seq_item rhs_;
        
        if(!$cast(rhs_, rhs)) begin
            return 0;
        end
        return((super.do_compare(rhs, comparer)) &&
        (data_in == rhs_.data_in) &&
        (reset == rhs_.reset) &&
        (instruction == rhs_.instruction) &&
        (instr_addr == rhs_.instr_addr) &&
        (op_select == rhs_.op_select) &&
        (bus_D == rhs_.bus_D) &&
        (address_out == rhs_.address_out) &&
        (data_out == rhs_.data_out) &&
        (zero == rhs_.zero));
    endfunction: do_compare

    function string convert2string();
        string s;
        s = super.convert2string();
        $sformat(s, "%s\n data_in: \t%0h\n reset: \t%0h\n instruction: \t%0h\n instr_addr: \t%0h\n op_select: \t%0h\n bus_D: \t%0h\n address_out: \t%0h\n data_out: \t%0h\n zero: \t%0h\n",
        s,
        data_in,
        reset,
        instruction,
        instr_addr,
        op_select,
        bus_D,
        address_out,
        data_out,
        zero);
        return s;
    endfunction: convert2string

    function void do_print(uvm_printer printer);
        printer.m_string = convert2string();
    endfunction: do_print

    function void do_record(uvm_recorder recorder);
        super.do_record(recorder);
        `uvm_record_field("data_in", data_in)
        `uvm_record_field("reset", reset)
        `uvm_record_field("instruction", instruction)
        `uvm_record_field("instr_addr", instr_addr)                
        `uvm_record_field("op_select", op_select)
        `uvm_record_field("bus_D", bus_D)
        `uvm_record_field("address_out", address_out)
        `uvm_record_field("data_out", data_out)
        `uvm_record_field("zero", zero)
    endfunction: do_record
endclass: cpu_mon_bus_seq_item
